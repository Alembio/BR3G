#include<Servo.h>
#include<math.h>

Servo myServo1;
Servo myServo2;
Servo myServo3;

int L1 = 13;
int L2 = 13;
float ang1, ang2, ang3;
int flag;

double Nm;
double d1 = 0;
double d2 = 0;
double d3 = 0;

double posinit1 = 90;
double posinit2 = 0;
double posinit3 = 0;

float arreglo[] = {
40.658,171.12,138.37,40.222,170.5,137.16,39.623,169.3,134.78,39.032,168.11,132.41,38.436,166.97,130.14,37.829,165.89,127.98,37.212,164.87,125.92,36.584,163.9,123.94,35.945,162.97,122.06,35.294,162.08,120.24,34.632,161.23,118.5,33.958,160.42,116.82,33.272,159.64,115.2,32.575,158.88,113.63,31.865,158.16,112.12,31.143,157.47,110.66,30.409,156.8,109.25,29.662,156.16,107.88,28.903,155.54,106.56,28.131,154.94,105.28,27.132,139.85,98.245,31.106,139.89,98.74,35.312,140.6,100.05,39.469,141.72,102.13,43.523,143.27,104.97,47.441,145.25,108.62,47.672,159.04,114.48,47.21,159.26,114.59,46.547,159.32,114.59,45.874,159.33,114.58,45.199,159.34,114.58,44.525,159.35,114.61,43.851,159.38,114.66,43.179,159.41,114.73,42.508,159.46,114.82,41.839,159.51,114.94,41.173,159.58,115.08,40.508,159.66,115.25,39.845,159.75,115.44,39.186,159.86,115.66,38.528,159.97,115.9,37.874,160.1,116.16,37.222,160.24,116.45,36.574,160.39,116.76,35.929,160.55,117.1,35.287,160.73,117.47,34.649,160.92,117.85,34.485,160.31,116.59,34.391,159.34,114.58,34.338,158.39,112.61,34.295,157.48,110.68,34.253,156.59,108.81,34.212,155.73,106.97,34.169,154.89,105.18,34.126,154.08,103.42,34.081,153.28,101.7,34.035,152.51,100,33.988,151.76,98.345,33.94,151.03,96.713,33.89,150.31,95.109,33.839,149.61,93.53,33.787,148.93,91.976,33.733,148.26,90.444,33.678,147.61,88.935,33.62,146.98,87.446,33.562,146.36,85.977,22.692,154.02,124.62,26.921,150.77,118.77,31.705,148.15,113.96,36.771,146.41,110.75,42.043,145.5,109.06,47.437,145.38,108.84,47.461,145.38,108.85,47.969,144.97,108.09,48.493,144.42,107.08,49.005,143.86,106.06,49.521,143.32,105.06,50.042,142.79,104.08,50.218,156.52,109.2,49.823,156.13,107.98,49.265,155.34,106.18,48.688,154.52,104.39,48.095,153.71,102.63,47.486,152.93,100.91,46.863,152.16,99.239,46.223,151.43,97.605,45.567,150.71,96.01,44.895,150.02,94.451,44.205,149.35,92.928,43.497,148.69,91.438,42.772,148.06,89.982,42.027,147.45,88.558,41.263,146.86,87.165,40.479,146.29,85.802,39.674,145.73,84.469,38.849,145.19,83.166,38.002,144.67,81.891,37.133,144.17,80.644,35.995,126.34,73.581,39.197,128.64,78.23,42.348,131.66,83.739,45.185,134.94,89.695,47.749,138.47,96.162,50.07,142.33,103.24,50.086,142.36,103.29,50.519,142.18,102.97,51.094,141.74,102.16,51.647,141.26,101.28,52.201,140.79,100.41,52.76,140.32,99.549,52.949,154.36,104.6,52.566,154,103.41,52.022,153.24,101.65,51.459,152.45,99.886,50.879,151.67,98.156,50.283,150.91,96.462,49.671,150.17,94.806,49.042,149.46,93.186,48.396,148.77,91.6,47.732,148.09,90.048,47.05,147.44,88.528,46.348,146.81,87.038,45.626,146.19,85.579,44.884,145.6,84.149,44.12,145.02,82.748,43.335,144.46,81.375,42.527,143.92,80.029,41.696,143.4,78.71,40.84,142.9,77.418,39.959,142.41,76.153,38.803,123.76,68.935,43.994,124.73,71.208,49.236,126.49,74.391,54.161,128.65,78.283,58.723,131.18,82.858,62.916,134.07,88.116,63.156,149.39,93.679,62.624,149.49,93.473,61.856,149.38,93.049,61.071,149.2,92.604,60.277,149.01,92.171,59.478,148.83,91.756,58.674,148.66,91.362,57.866,148.5,90.99,57.054,148.35,90.639,56.239,148.21,90.31,55.42,148.07,90.002,54.599,147.95,89.716,53.774,147.84,89.451,52.948,147.73,89.208,52.12,147.64,88.987,51.29,147.55,88.786,50.458,147.47,88.608,49.626,147.41,88.451,48.793,147.35,88.316,47.96,147.3,88.202,47.127,147.26,88.109,47.032,146.86,87.171,47.098,146.27,85.757,47.222,145.69,84.374,47.365,145.13,83.013,47.516,144.58,81.669,47.673,144.05,80.344,47.835,143.53,79.035,48.002,143.02,77.742,48.174,142.53,76.465,48.352,142.05,75.204,48.536,141.58,73.957,48.726,141.13,72.725,48.923,140.69,71.508,49.127,140.26,70.305,49.337,139.85,69.115,49.555,139.45,67.94,49.782,139.06,66.778,50.016,138.68,65.629,50.26,138.33,64.494,30.872,132.57,85.16,36.726,131.46,83.368,43.228,131,82.53,49.88,131.29,83.068,56.488,132.35,84.989,62.886,134.16,88.285,62.913,134.17,88.303,63.588,134.04,88.068,64.308,133.81,87.652,65.019,133.57,87.215,65.732,133.34,86.787,66.451,133.11,86.377,66.476,133.11,86.364,68.277,132.6,85.439,70.138,132.15,84.63,72.038,131.78,83.947,73.97,131.47,83.392,75.931,131.24,82.966,76.198,146.97,88.155,75.235,147.3,88.37,73.965,147.33,88.307,72.687,147.21,87.989,71.41,146.97,87.436,70.145,146.65,86.661,68.902,146.23,85.675,67.693,145.74,84.494,66.53,145.18,83.133,65.425,144.56,81.613,64.394,143.89,79.955,63.448,143.19,78.182,62.606,142.47,76.318,61.882,141.74,74.389,61.294,141.02,72.422,60.862,140.31,70.446,60.604,139.63,68.488,60.539,138.99,66.579,60.685,138.41,64.749,61.061,137.88,63.031,61.677,137.41,61.454,62.542,137.02,60.049,63.656,136.7,58.846,65.007,136.45,57.87,66.574,136.27,57.144,68.322,136.17,56.686,70.205,136.12,56.506,72.167,136.15,56.611,74.148,136.24,56.996,76.086,136.4,57.653,77.924,136.63,58.565,79.615,136.93,59.711,81.121,137.3,61.065,82.416,137.75,62.6,83.483,138.26,64.284,84.319,138.83,66.087,84.923,139.46,67.978,85.305,140.13,69.926,85.475,140.83,71.901,85.447,141.55,73.873,85.238,142.28,75.814,84.862,143.01,77.698,84.336,143.71,79.497,83.676,144.39,81.188,82.897,145.02,82.747,82.013,145.6,84.151,81.038,146.11,85.382,79.985,146.55,86.421,78.866,146.9,87.253,77.694,147.16,87.866,76.234,131.51,82.954,77.897,131.12,82.677,79.917,130.98,82.5,81.937,130.96,82.46,83.966,131.01,82.55,85.999,131.13,82.769,86.027,131.13,82.773,86.792,131.19,82.89,87.623,131.27,83.037,88.439,131.37,83.203,89.251,131.47,83.389

};

int S = sizeof(arreglo) / sizeof(arreglo[0]); //Definir el tamaño del arreglo


double deltamayor(double a, double b, double c)
{
  double g = 0;

  if (a < 0)
  {
    a = a * -1;
  }
  if (b < 0)
  {
    b = b * -1;
  }
  if (c < 0)
  {
    c = c * -1;
  }
  if (a > g)
  {
    g = a;
  }
  if (b > g)
  {
    g = b;
  }
  if (c > g)
  {
    g = c;
  }

  return g;
}

double delta(double Nm, double h)
{
  double g;
  g = h / Nm;

  return g;
}

double pos1f = arreglo[0];
double pos2f = arreglo[1];
double pos3f = arreglo[2];

double a = pos1f - posinit1;
double b = pos2f - posinit2;
double c = pos3f - posinit3;

void setup() {

  Serial.begin(9600); //Iniciar comunicación serial

  //Vincular los motores a los pines 9, 10 y 11 del arduino
  myServo1.attach(9);
  myServo2.attach(10);
  myServo3.attach(11);

  //Definir posiciones iniciales
  myServo1.write(90);
  myServo2.write(0);
  myServo3.write(0);

  Serial.println("Escribe 1 para correr el codigo");
}

void loop() {

  if (Serial.available()) { //Si hay comunicación serial

    flag = Serial.read(); //Restricción
  }

  if (flag > 0) //Restricción
  {
    Nm = deltamayor(a, b, c); //Numero de muestras (intervalos) funcion = Nm

    pos1f = posinit1;
    pos2f = posinit2;
    pos3f = posinit3;

    //Abrirse
    for (int i = 0; i <= Nm; i++)
    {
      pos1f = pos1f + d1;
      pos2f = pos2f + d2;
      pos3f = pos3f + d3;
      Serial.print(pos1f);
      Serial.print(" ");
      Serial.print(pos2f);
      Serial.print(" ");
      Serial.print(pos3f);
      Serial.print("\n");
      myServo1.write(pos1f);
      myServo2.write(pos2f);
      myServo3.write(pos3f);
      delay(30);
      d1 = delta(Nm, a); //delta 1
      d2 = delta(Nm, b); //delta 2
      d3 = delta(Nm, c); //delta 3
    }
    delay(3000);
    Serial.println(" ");

    //Puntos
    for (int i = 0; i < S; i = i + 3)
    {
      ang1 = arreglo[i];
      ang2 = arreglo[i + 1];
      ang3 = arreglo[i + 2];

      //Imprimir datos
      Serial.print(ang1);
      Serial.print(" ");
      Serial.print(ang2);
      Serial.print(" ");
      Serial.print(ang3);
      Serial.print("\n");


      myServo1.write(ang1);
      myServo2.write(ang2);
      myServo3.write(ang3);
      delay(75);
    }
    
      posinit1 = ang1;
      posinit2 = ang2;
      posinit3 = ang3;

      pos1f = 90;
      pos2f = 0;
      pos3f = 0;

      a = pos1f - posinit1;
      b = pos2f - posinit2;
      c = pos3f - posinit3;

      Nm = deltamayor(a, b, c); //Numero de muestras (intervalos) funcion = Nm

      pos1f = ang1;
      pos2f = ang2;
      pos3f = ang3;

      d1 = 0;
      d2 = 0;
      d3 = 0;

      delay(3000);
      Serial.println(" ");

      //Guardarse
      for (int i = 0; i <= Nm; i++)
      {
        pos1f = pos1f + d1;
        pos2f = pos2f + d2;
        pos3f = pos3f + d3;
        Serial.print(pos1f);
        Serial.print(" ");
        Serial.print(pos2f);
        Serial.print(" ");
        Serial.print(pos3f);
        Serial.print("\n");
        myServo1.write(pos1f);
        myServo2.write(pos2f);
        myServo3.write(pos3f);
        delay(30);
        d1 = delta(Nm, a); //delta 1
        d2 = delta(Nm, b); //delta 2
        d3 = delta(Nm, c); //delta 3
      }

      Serial.print(90);
      Serial.print(" ");
      Serial.print(0);
      Serial.print(" ");
      Serial.print(0);
      Serial.print("\n");

      myServo1.write(90);
      myServo2.write(0);
      myServo3.write(0);
      delay(30);
    }

    flag = 0; //Restricción
  }

