#include<iostream>
#include<math.h>
# define M_PI           3.14159265358979323846  /* pi */
using namespace std;

int anginit1;
int anginit2;
int anginit3;
float x;
float y;
float z;

int a, b, c;
int Nm;

float pos1f;
float pos2f;
float pos3f;

float d1;
float d2;
float d3;

int pos1d;
int pos2d;
int pos3d;

int L1, L2;
int ang1, ang2, ang3;

const int S = 1650;

float arreglo[S] = { -250, 200, 0, -250.0, 192.0, 0, -250.0, 184.0, 0, -250.0, 176.0, 0, -250.0, 168.0, 0, -250.0, 160.0, 0, -250, 160, 1, -250.0, 162.0, 1, -250.0, 164.0, 1, -250.0, 166.0, 1, -250.0, 168.0, 1, -250.0, 170.0, 1, -250.0, 172.0, 1, -250.0, 174.0, 1, -250.0, 176.0, 1, -250.0, 178.0, 1, -250.0, 180.0, 1, -250.0, 182.0, 1, -250.0, 184.0, 1, -250.0, 186.0, 1, -250.0, 188.0, 1, -250.0, 190.0, 1, -250.0, 192.0, 1, -250.0, 194.0, 1, -250.0, 196.0, 1, -250.0, 198.0, 1, -250.0, 200, 1, -249.75, 200.0, 1, -249.5, 200.0, 1, -249.25, 200.0, 1, -249.0, 200.0, 1, -248.75, 200.0, 1, -248.5, 200.0, 1, -248.25, 200.0, 1, -248.0, 200.0, 1, -247.75, 200.0, 1, -247.5, 200.0, 1, -247.25, 200.0, 1, -247.0, 200.0, 1, -246.75, 200.0, 1, -246.5, 200.0, 1, -246.25, 200.0, 1, -246.0, 200.0, 1, -245.75, 200.0, 1, -245.5, 200.0, 1, -245.25, 200.0, 1, -245.0, 200.0, 1, -244.37209480470688, 199.98026728428272, 1, -243.74666766435695, 199.92114701314478, 1, -243.12618685414276, 199.8228725072869, 1, -242.51310112835145, 199.68583161128632, 1, -241.9098300562505, 199.51056516295154, 1, -241.3187544731532, 199.29776485888252, 1, -240.74220708434927, 199.04827052466018, 1, -240.18246325898284, 198.76306680043862, 1, -239.64173205021004, 198.44327925502014, 1, -239.12214747707526, 198.09016994374946, 1, -238.6257601025131, 197.7051324277579, 1, -238.1545289407131, 197.28968627421412, 1, -237.71031372578588, 196.8454710592869, 1, -237.2948675722421, 196.3742398974869, 1, -236.9098300562505, 195.87785252292474, 1, -236.55672074497986, 195.35826794978996, 1, -236.23693319956135, 194.81753674101716, 1, -235.9517294753398, 194.25779291565073, 1, -235.70223514111748, 193.68124552684677, 1, -235.48943483704846, 193.09016994374946, 1, -235.31416838871368, 192.48689887164855, 1, -235.1771274927131, 191.87381314585724, 1, -235.07885298685522, 191.25333233564305, 1, -235.01973271571728, 190.62790519529312, 1, -235.0, 190.0, 1, -235.01973271571728, 189.37209480470688, 1, -235.07885298685522, 188.74666766435695, 1, -235.1771274927131, 188.12618685414276, 1, -235.31416838871368, 187.51310112835145, 1, -235.48943483704846, 186.9098300562505, 1, -235.70223514111748, 186.3187544731532, 1, -235.95172947533982, 185.74220708434927, 1, -236.23693319956138, 185.18246325898284, 1, -236.55672074497986, 184.64173205021004, 1, -236.90983005625054, 184.12214747707526, 1, -237.2948675722421, 183.62576010251308, 1, -237.71031372578588, 183.1545289407131, 1, -238.15452894071313, 182.71031372578588, 1, -238.6257601025131, 182.2948675722421, 1, -239.1221474770753, 181.9098300562505, 1, -239.64173205021004, 181.55672074497983, 1, -240.18246325898286, 181.23693319956135, 1, -240.74220708434927, 180.9517294753398, 1, -241.31875447315323, 180.70223514111748, 1, -241.90983005625054, 180.48943483704846, 1, -242.51310112835145, 180.31416838871368, 1, -243.12618685414276, 180.1771274927131, 1, -243.74666766435698, 180.07885298685522, 1, -244.37209480470688, 180.01973271571728, 1, -245.0, 180, 1, -244.75, 180.0, 1, -244.5, 180.0, 1, -244.25, 180.0, 1, -244.0, 180.0, 1, -243.75, 180.0, 1, -243.5, 180.0, 1, -243.25, 180.0, 1, -243.0, 180.0, 1, -242.75, 180.0, 1, -242.5, 180.0, 1, -242.25, 180.0, 1, -242.0, 180.0, 1, -241.75, 180.0, 1, -241.5, 180.0, 1, -241.25, 180.0, 1, -241.0, 180.0, 1, -240.75, 180.0, 1, -240.5, 180.0, 1, -240.25, 180.0, 1, -240.0, 180.0, 1, -239.37209480470688, 179.98026728428272, 1, -238.74666766435695, 179.92114701314478, 1, -238.12618685414276, 179.8228725072869, 1, -237.51310112835145, 179.68583161128632, 1, -236.9098300562505, 179.51056516295154, 1, -236.3187544731532, 179.29776485888252, 1, -235.74220708434927, 179.04827052466018, 1, -235.18246325898284, 178.76306680043862, 1, -234.64173205021004, 178.44327925502014, 1, -234.12214747707526, 178.09016994374946, 1, -233.6257601025131, 177.7051324277579, 1, -233.1545289407131, 177.28968627421412, 1, -232.71031372578588, 176.8454710592869, 1, -232.2948675722421, 176.3742398974869, 1, -231.9098300562505, 175.87785252292474, 1, -231.55672074497986, 175.35826794978996, 1, -231.23693319956135, 174.81753674101716, 1, -230.9517294753398, 174.25779291565073, 1, -230.70223514111748, 173.68124552684677, 1, -230.48943483704846, 173.09016994374946, 1, -230.31416838871368, 172.48689887164855, 1, -230.1771274927131, 171.87381314585724, 1, -230.07885298685522, 171.25333233564305, 1, -230.01973271571728, 170.62790519529312, 1, -230.0, 170.0, 1, -230.01973271571728, 169.37209480470688, 1, -230.07885298685522, 168.74666766435695, 1, -230.1771274927131, 168.12618685414276, 1, -230.31416838871368, 167.51310112835145, 1, -230.48943483704846, 166.9098300562505, 1, -230.70223514111748, 166.3187544731532, 1, -230.95172947533982, 165.74220708434927, 1, -231.23693319956138, 165.18246325898284, 1, -231.55672074497986, 164.64173205021004, 1, -231.90983005625054, 164.12214747707526, 1, -232.2948675722421, 163.62576010251308, 1, -232.71031372578588, 163.1545289407131, 1, -233.15452894071313, 162.71031372578588, 1, -233.6257601025131, 162.2948675722421, 1, -234.1221474770753, 161.9098300562505, 1, -234.64173205021004, 161.55672074497983, 1, -235.18246325898286, 161.23693319956135, 1, -235.74220708434927, 160.9517294753398, 1, -236.31875447315323, 160.70223514111748, 1, -236.90983005625054, 160.48943483704846, 1, -237.51310112835145, 160.31416838871368, 1, -238.12618685414276, 160.1771274927131, 1, -238.74666766435698, 160.07885298685522, 1, -239.37209480470688, 160.01973271571728, 1, -240.0, 160, 1, -240.5, 160.0, 1, -241.0, 160.0, 1, -241.5, 160.0, 1, -242.0, 160.0, 1, -242.5, 160.0, 1, -243.0, 160.0, 1, -243.5, 160.0, 1, -244.0, 160.0, 1, -244.5, 160.0, 1, -245.0, 160.0, 1, -245.5, 160.0, 1, -246.0, 160.0, 1, -246.5, 160.0, 1, -247.0, 160.0, 1, -247.5, 160.0, 1, -248.0, 160.0, 1, -248.5, 160.0, 1, -249.0, 160.0, 1, -249.5, 160.0, 1, -250.0, 160, 0, -246.0, 168.0, 0, -242.0, 176.0, 0, -238.0, 184.0, 0, -234.0, 192.0, 0, -230.0, 200.0, 0, -230.0, 200.0, 0, -228.4, 200.0, 0, -226.8, 200.0, 0, -225.2, 200.0, 0, -223.6, 200.0, 0, -222.0, 200.0, 0, -222.0, 200.0, 0, -222.0, 192.0, 0, -222.0, 184.0, 0, -222.0, 176.0, 0, -222.0, 168.0, 0, -222.0, 160.0, 0, -222.0, 160.0, 1, -222.0, 162.0, 1, -222.0, 164.0, 1, -222.0, 166.0, 1, -222.0, 168.0, 1, -222.0, 170.0, 1, -222.0, 172.0, 1, -222.0, 174.0, 1, -222.0, 176.0, 1, -222.0, 178.0, 1, -222.0, 180.0, 1, -222.0, 182.0, 1, -222.0, 184.0, 1, -222.0, 186.0, 1, -222.0, 188.0, 1, -222.0, 190.0, 1, -222.0, 192.0, 1, -222.0, 194.0, 1, -222.0, 196.0, 1, -222.0, 198.0, 1, -222.0, 200.0, 1, -221.5, 200.0, 1, -221.0, 200.0, 1, -220.5, 200.0, 1, -220.0, 200.0, 1, -219.5, 200.0, 1, -219.0, 200.0, 1, -218.5, 200.0, 1, -218.0, 200.0, 1, -217.5, 200.0, 1, -217.0, 200.0, 1, -216.5, 200.0, 1, -216.0, 200.0, 1, -215.5, 200.0, 1, -215.0, 200.0, 1, -214.5, 200.0, 1, -214.0, 200.0, 1, -213.5, 200.0, 1, -213.0, 200.0, 1, -212.5, 200.0, 1, -212.0, 200.0, 1, -211.37209480470688, 199.98026728428272, 1, -210.74666766435695, 199.92114701314478, 1, -210.12618685414276, 199.8228725072869, 1, -209.51310112835145, 199.68583161128632, 1, -208.9098300562505, 199.51056516295154, 1, -208.3187544731532, 199.29776485888252, 1, -207.74220708434927, 199.04827052466018, 1, -207.18246325898284, 198.76306680043862, 1, -206.64173205021004, 198.44327925502014, 1, -206.12214747707526, 198.09016994374946, 1, -205.6257601025131, 197.7051324277579, 1, -205.1545289407131, 197.28968627421412, 1, -204.71031372578588, 196.8454710592869, 1, -204.2948675722421, 196.3742398974869, 1, -203.9098300562505, 195.87785252292474, 1, -203.55672074497986, 195.35826794978996, 1, -203.23693319956135, 194.81753674101716, 1, -202.9517294753398, 194.25779291565073, 1, -202.70223514111748, 193.68124552684677, 1, -202.48943483704846, 193.09016994374946, 1, -202.31416838871368, 192.48689887164855, 1, -202.1771274927131, 191.87381314585724, 1, -202.07885298685522, 191.25333233564305, 1, -202.01973271571728, 190.62790519529312, 1, -202.0, 190.0, 1, -202.01973271571728, 189.37209480470688, 1, -202.07885298685522, 188.74666766435695, 1, -202.1771274927131, 188.12618685414276, 1, -202.31416838871368, 187.51310112835145, 1, -202.48943483704846, 186.9098300562505, 1, -202.70223514111748, 186.3187544731532, 1, -202.95172947533982, 185.74220708434927, 1, -203.23693319956138, 185.18246325898284, 1, -203.55672074497986, 184.64173205021004, 1, -203.90983005625054, 184.12214747707526, 1, -204.2948675722421, 183.62576010251308, 1, -204.71031372578588, 183.1545289407131, 1, -205.15452894071313, 182.71031372578588, 1, -205.6257601025131, 182.2948675722421, 1, -206.1221474770753, 181.9098300562505, 1, -206.64173205021004, 181.55672074497983, 1, -207.18246325898286, 181.23693319956135, 1, -207.74220708434927, 180.9517294753398, 1, -208.31875447315323, 180.70223514111748, 1, -208.90983005625054, 180.48943483704846, 1, -209.51310112835145, 180.31416838871368, 1, -210.12618685414276, 180.1771274927131, 1, -210.74666766435698, 180.07885298685522, 1, -211.37209480470688, 180.01973271571728, 1, -212.0, 180.0, 1, -212.5, 180.0, 1, -213.0, 180.0, 1, -213.5, 180.0, 1, -214.0, 180.0, 1, -214.5, 180.0, 1, -215.0, 180.0, 1, -215.5, 180.0, 1, -216.0, 180.0, 1, -216.5, 180.0, 1, -217.0, 180.0, 1, -217.5, 180.0, 1, -218.0, 180.0, 1, -218.5, 180.0, 1, -219.0, 180.0, 1, -219.5, 180.0, 1, -220.0, 180.0, 1, -220.5, 180.0, 1, -221.0, 180.0, 1, -221.5, 180.0, 1, -222.0, 180.0, 1, -221.0, 179.0, 1, -220.0, 178.0, 1, -219.0, 177.0, 1, -218.0, 176.0, 1, -217.0, 175.0, 1, -216.0, 174.0, 1, -215.0, 173.0, 1, -214.0, 172.0, 1, -213.0, 171.0, 1, -212.0, 170.0, 1, -211.0, 169.0, 1, -210.0, 168.0, 1, -209.0, 167.0, 1, -208.0, 166.0, 1, -207.0, 165.0, 1, -206.0, 164.0, 1, -205.0, 163.0, 1, -204.0, 162.0, 1, -203.0, 161.0, 1, -202.0, 160.0, 0, -202.0, 168.0, 0, -202.0, 176.0, 0, -202.0, 184.0, 0, -202.0, 192.0, 0, -202.0, 200.0, 0, -202.0, 200.0, 0, -200.4, 200.0, 0, -198.8, 200.0, 0, -197.2, 200.0, 0, -195.6, 200.0, 0, -194.0, 200.0, 0, -194.0, 200.0, 1, -194.0, 198.0, 1, -194.0, 196.0, 1, -194.0, 194.0, 1, -194.0, 192.0, 1, -194.0, 190.0, 1, -194.0, 188.0, 1, -194.0, 186.0, 1, -194.0, 184.0, 1, -194.0, 182.0, 1, -194.0, 180.0, 1, -194.0, 178.0, 1, -194.0, 176.0, 1, -194.0, 174.0, 1, -194.0, 172.0, 1, -194.0, 170.0, 1, -194.0, 168.0, 1, -194.0, 166.0, 1, -194.0, 164.0, 1, -194.0, 162.0, 1, -194.0, 160.0, 1, -192.7, 160.0, 1, -191.4, 160.0, 1, -190.1, 160.0, 1, -188.8, 160.0, 1, -187.5, 160.0, 1, -186.2, 160.0, 1, -184.9, 160.0, 1, -183.6, 160.0, 1, -182.3, 160.0, 1, -181.0, 160.0, 1, -179.7, 160.0, 1, -178.4, 160.0, 1, -177.1, 160.0, 1, -175.8, 160.0, 1, -174.5, 160.0, 1, -173.2, 160.0, 1, -171.9, 160.0, 1, -170.6, 160.0, 1, -169.29999999999998, 160.0, 1, -168.0, 160.0, 0, -173.2, 168.0, 0, -178.4, 176.0, 0, -183.6, 184.0, 0, -188.8, 192.0, 0, -194.0, 200.0, 0, -194.0, 200.0, 1, -192.7, 200.0, 1, -191.4, 200.0, 1, -190.1, 200.0, 1, -188.8, 200.0, 1, -187.5, 200.0, 1, -186.2, 200.0, 1, -184.9, 200.0, 1, -183.6, 200.0, 1, -182.3, 200.0, 1, -181.0, 200.0, 1, -179.7, 200.0, 1, -178.4, 200.0, 1, -177.1, 200.0, 1, -175.8, 200.0, 1, -174.5, 200.0, 1, -173.2, 200.0, 1, -171.9, 200.0, 1, -170.6, 200.0, 1, -169.29999999999998, 200.0, 1, -168.0, 200.0, 0, -173.2, 196.0, 0, -178.4, 192.0, 0, -183.6, 188.0, 0, -188.8, 184.0, 0, -194.0, 180.0, 0, -194.0, 180.0, 1, -193.35, 180.0, 1, -192.7, 180.0, 1, -192.05, 180.0, 1, -191.4, 180.0, 1, -190.75, 180.0, 1, -190.1, 180.0, 1, -189.45, 180.0, 1, -188.8, 180.0, 1, -188.15, 180.0, 1, -187.5, 180.0, 1, -186.85, 180.0, 1, -186.2, 180.0, 1, -185.55, 180.0, 1, -184.9, 180.0, 1, -184.25, 180.0, 1, -183.6, 180.0, 1, -182.95, 180.0, 1, -182.3, 180.0, 1, -181.65, 180.0, 1, -181.0, 180.0, 0, -178.4, 184.0, 0, -175.8, 188.0, 0, -173.2, 192.0, 0, -170.6, 196.0, 0, -168.0, 200.0, 0, -168.0, 200.0, 0, -166.4, 200.0, 0, -164.8, 200.0, 0, -163.2, 200.0, 0, -161.6, 200.0, 0, -160.0, 200.0, 0, -160.0, 200.0, 0, -150.36, 201.65685424949237, 0, -140.72, 203.31370849898477, 0, -131.07999999999998, 204.97056274847714, 0, -121.44, 206.62741699796953, 0, -111.8, 208.2842712474619, 0, -127.99999999999999, 196.0, 1, -129.77745877008257, 197.19575411939502, 1, -131.67261691271491, 198.19453498014875, 1, -133.66373133730787, 198.9848836004244, 1, -135.72795804982542, 199.5577323350155, 1, -137.84161424122004, 199.90650890815772, 1, -139.9804499995661, 200.02721181704533, 1, -142.11992652854732, 199.91845624094844, 1, -144.2354976803058, 199.58148992921838, 1, -146.30289157263508, 199.02017888589808, 1, -148.2983890595318, 198.24096301517767, 1, -150.19909586022217, 197.25278223657338, 1, -151.9832052245352, 196.06697391750816, 1, -153.63024812107096, 194.69714280004703, 1, -155.12132807776302, 193.15900491411327, 1, -156.4393379805164, 191.47020726796447, 1, -157.56915634259684, 189.65012538461428, 1, -158.49782079297924, 187.7196410070578, 1, -159.2146767932283, 185.70090252268182, 1, -159.71149987668753, 183.61707085550336, 1, -159.98259000753012, 181.49205374160675, 1, -160.0248369770932, 179.3502314364291, 1, -159.83775608720532, 177.2161770008459, 1, -159.42349371111354, 175.11437437520559, 1, -158.78680266820982, 173.06893747584158, 1, -157.93498769508145, 171.10333353685795, 1, -156.8778216384948, 169.24011387128044, 1, -155.62743333182746, 167.5006551405417, 1, -154.19816844133916, 165.9049141007075, 1, -152.60642487878764, 164.47119863923353, 1, -150.87046466869575, 163.21595772914043, 1, -149.01020442871038, 162.1535927104565, 1, -147.04698686686612, 161.29629206409027, 1, -145.00333591735784, 160.653891573767, 1, -142.90269832414234, 160.2337614803871, 1, -140.76917463717206, 160.04072192348102, 1, -138.62724270753318, 160.07698763989765, 1, -136.5014768538192, 160.34214255419744, 1, -134.41626592173589, 160.8331445522728, 1, -132.3955334716311, 161.54436038342897, 1, -130.46246330422878, 162.46763029049455, 1, -128.63923347360245, 163.59236162646235, 1, -126.94676183904862, 164.9056503836001, 1, -125.404466075136, 166.3924292407308, 1, -124.03004089332728, 168.03564043014123, 1, -122.83925503110348, 169.81643144082204, 1, -121.84577033772786, 171.71437131274163, 1, -121.0609850322731, 173.7076850406169, 1, -120.49390293220736, 175.77350339787355, 1, -120.15103015287579, 177.88812531457336, 1, -120.0, 180.0, 1, -121.0, 180.0, 1, -122.0, 180.0, 1, -123.0, 180.0, 1, -124.0, 180.0, 1, -125.0, 180.0, 1, -126.0, 180.0, 1, -127.0, 180.0, 1, -128.0, 180.0, 1, -129.0, 180.0, 1, -130.0, 180.0, 1, -131.0, 180.0, 1, -132.0, 180.0, 1, -133.0, 180.0, 1, -134.0, 180.0, 1, -135.0, 180.0, 1, -136.0, 180.0, 1, -137.0, 180.0, 1, -138.0, 180.0, 1, -139.0, 180.0, 1, -120.0, 180.0, 0, -120.0, 184.0, 0, -120.0, 188.0, 0, -120.0, 192.0, 0, -120.0, 196.0, 0, -120.0, 200.0, 0, -120.0, 200.0, 0, -118.4, 200.0, 0, -116.8, 200.0, 0, -115.2, 200.0, 0, -113.6, 200.0, 0, -112.0, 200.0, 0, -112.0, 200.0, 0, -141.2, 190.4, 0, -170.4, 180.8, 0, -199.60000000000002, 171.2, 0, -228.8, 161.6, 0, -258.0, 152.0, 0, -258.0, 152.0, 0, -256.4, 152.0, 0, -254.8, 152.0, 0, -253.2, 152.0, 0, -251.6, 152.0, 0, -250.0, 152.0, 0 };

int deltamayor(int a, int b, int c) //Función para hallar el número de intervalos
{
	int g = 0;

	if (a < 0)
	{
		a = a * -1;
	}
	if (b < 0)
	{
		b = b * -1;
	}
	if (c < 0)
	{
		c = c * -1;
	}
	if (a > g)
	{
		g = a;
	}
	if (b > g)
	{
		g = b;
	}
	if (c > g)
	{
		g = c;
	}

	return g;
}

float delta(float Nm, float letra)//Relación entre la diferencia de ángulos y el número de muestras (intervalos)
{
	double g;
	g = letra / Nm;

	return g;
}

float redondear(float posf) //función para redondear
{
	return floor(posf + 0.5);
}

float angulo1(float x, float y) //Función para calcular el ángulo del primer motor
{
	float ang;
	ang = atan2(y, x);
	ang = ang * 180 / M_PI;
	return ang;
}

float angulo2(float x, float y, float z, float L1, float L2) //Función para hallar el ángulo del segundo motor
{
	float ang;
	float alpha;
	float beta;
	alpha = (L1*L1 + x*x + y*y + z*z - L2*L2) / (2 * L1 * sqrt(x*x + y*y + z*z));
	alpha = acos(alpha);
	alpha = alpha * 180 / M_PI;

	beta = z / (sqrt(x*x + y*y));
	beta = atan(beta);
	beta = beta * 180 / M_PI;

	ang = alpha + beta;
	ang = redondear(ang);
	return ang;
}

float angulo3(float x, float y, float z, float L1, float L2) //Función para hallar el ángulo del tercer motor
{
	float w;
	w = (L1*L1 + L2*L2 - (x*x + y*y + z*z)) / (2 * L1 * L2);
	float ang;
	ang = acos(w);
	ang = ang * 180 / M_PI;
	ang = redondear(ang);
	return ang;
}

float convx(float x)
{
	x = x / 400 * 20;
	return x;
}

float convy(float y)
{
	y = 20 * (y) / 300;
	return y;
}

int main()
{
	anginit1 = 0;
	anginit2 = 0;
	anginit3 = 0;

	L1 = 13;
	L2 = 13;

	for (int i = 0; i < S; i = i+3)
	{
		x = arreglo[i];
		x = convx(x);
		y = arreglo[i + 1];
		y = convy(y);
		z = arreglo[i + 2];

		if ((x < -10.4) || (x > 10.4) || (y < 0) || (y > 26) )
		{
			cout << "Fuera de la pagina" << endl;
			cout << endl;
		}
		else {

			if (y > sqrt((L1 + L2)*(L1 + L2) - (x*x)))
			{
				cout << "Fuera de rango" << endl;
				cout << endl;
			}
			else {

				/*
				cout << x << "  " << y << "  " << z << endl;
				cout << endl;
				*/

				cout << i + 1 << endl;
				ang1 = angulo1(x, y);
				cout << "El angulo 1 es: " << ang1 << endl;

				ang2 = angulo2(x, y, z, L1, L2);
				cout << "El angulo 2 es: " << ang2 << endl;

				ang3 = angulo3(x, y, z, L1, L2);
				cout << "El angulo 3 es: " << ang3 << endl;

				cout << endl;

				/*
				a = ang1 - anginit1;
				b = ang2 - anginit2;
				c = ang3 - anginit3;
				Nm = deltamayor(a, b, c); //Numero de muestras (intervalos) funcion = Nm

				pos1f = anginit1;
				pos2f = anginit2;
				pos3f = anginit3;

				d1 = 0; //Para que la posición inicial no sea alterada
				d2 = 0;
				d3 = 0;

				for (int i = 0; i <= Nm; i++) //for para que el motor no se mueva bruzcamente y los 3 motores se muevan al mismo tiempo
				{
					pos1f = pos1f + d1; //Ángulo inicial + el primer diferencial
					pos2f = pos2f + d2;
					pos3f = pos3f + d3;

					pos1d = redondear(pos1f); //redondear los valores
					pos2d = redondear(pos2f);
					pos3d = redondear(pos3f);

					cout << pos1d << "   " << pos2d << "   " << pos3d << endl;

					d1 = delta(Nm, a); //delta 1
					d2 = delta(Nm, b); //delta 2
					d3 = delta(Nm, c); //delta 3

				}*/
			}
		}
	}
}
